{
	"info": {
		"_postman_id": "130659af-33cd-4fbf-b11c-6fd12a4af373",
		"name": "nr-forest-client-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17369587"
	},
	"item": [
		{
			"name": "findAllNonIndividuals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"const jsonData = responseData.json();\r",
							"\r",
							"pm.test(\"Status check test\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List size check test\", () => {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    const expectedSize = parseInt(pm.variables.get(\"INDIVIDUALS_SIZE\"));\r",
							"    pm.expect(jsonData.length).to.equals(expectedSize);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate client codes in list\", () => {    \r",
							"    const expectedClientCodes = pm.variables.get(\"INDIVIDUALS_CLIENT_TYPE_CODE\");\r",
							"    const receivedClientCodes = jsonData.map(value => value.clientTypeCode);    \r",
							"    pm.expect(receivedClientCodes).to.include.members(expectedClientCodes);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findAllNonIndividuals?{{INDIVIDUALS_QUERY_STRING}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findAllNonIndividuals"
					],
					"query": [
						{
							"key": "sortedColumnName",
							"value": "clientTypeCode",
							"disabled": true
						},
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"disabled": true
						},
						{
							"key": "{{INDIVIDUALS_QUERY_STRING}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "findByClientNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"\r",
							"pm.test(\"Status check test (\"+pm.variables.get(\"FIND_CODE\")+\")\", () => {\r",
							"    responseData.to.have.status(parseInt(pm.variables.get(\"FIND_CODE\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body\", () => {\r",
							"    const expectedBody = pm.variables.get(\"FIND_BODY\");\r",
							"    pm.response.to.have.body(expectedBody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findByClientNumber/{{FIND_NUMBER}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findByClientNumber",
						"{{FIND_NUMBER}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "findByNames",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"\r",
							"pm.test(\"Status check test (\"+pm.variables.get(\"BYNAME_CODE\")+\")\", () => {\r",
							"    responseData.to.have.status(parseInt(pm.variables.get(\"BYNAME_CODE\")));\r",
							"});\r",
							"\r",
							"if(parseInt(pm.variables.get(\"BYNAME_CODE\")) == 200){\r",
							"\r",
							"    const jsonData = responseData.json();\r",
							"    console.log(jsonData);\r",
							"        \r",
							"    pm.test(\"List size check test\", () => {\r",
							"        pm.expect(jsonData).to.be.an('array');\r",
							"        const expectedSize = parseInt(pm.variables.get(\"BYNAME_SIZE\"));\r",
							"        pm.expect(jsonData.length).to.equals(expectedSize);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Validate client codes in list\", () => {    \r",
							"        const expectedClientNumbers = pm.variables.get(\"BYNAME_CODES\");\r",
							"        const receivedClientNumbers = jsonData.map(value => value.clientNumber);    \r",
							"        pm.expect(receivedClientNumbers).to.include.members(expectedClientNumbers);\r",
							"    });\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findByNames?{{BYNAME_QUERY_STRING}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findByNames"
					],
					"query": [
						{
							"key": "clientName",
							"value": "\" \"",
							"disabled": true
						},
						{
							"key": "clientFirstName",
							"value": "james",
							"disabled": true
						},
						{
							"key": "clientMiddleName",
							"value": "",
							"disabled": true
						},
						{
							"key": "clientTypeCodes",
							"value": "A,B",
							"disabled": true
						},
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "20",
							"disabled": true
						},
						{
							"key": "{{BYNAME_QUERY_STRING}}",
							"value": null
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {    ",
					"    readOrSet:function(key,fallbackScope,conversionFn){        ",
					"        const variable = pm.variables.get(key);",
					"        if(!variable){",
					"            pm.variables.set(key,conversionFn(fallbackScope.get(key)));",
					"        }",
					"    },",
					"    copyFromTo:function(origin,destination,scope,fn){        ",
					"        const variable = scope.get(origin);        ",
					"        if(variable){            ",
					"            scope.set(destination,fn(variable));",
					"        }",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}