{
	"info": {
		"_postman_id": "130659af-33cd-4fbf-b11c-6fd12a4af373",
		"name": "nr-forest-client-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17369587"
	},
	"item": [
		{
			"name": "general",
			"item": [
				{
					"name": "health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_FCA}}/health",
							"host": [
								"{{URL_FCA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "findAllNonIndividuals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"const jsonData = responseData.json();\r",
							"\r",
							"pm.test(\"Status check test\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List size check test\", () => {\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    const expectedSize = parseInt(pm.variables.get(\"INDIVIDUALS_SIZE\"));\r",
							"    pm.expect(jsonData.length).to.equals(expectedSize);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate client codes in list\", () => {    \r",
							"    const expectedClientCodes = pm.variables.get(\"INDIVIDUALS_CLIENT_TYPE_CODE\");\r",
							"    const receivedClientCodes = jsonData.map(value => value.clientTypeCode);    \r",
							"    pm.expect(receivedClientCodes).to.include.members(expectedClientCodes);\r",
							"});\r",
							"\r",
							"const listSchema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": utils.schemas.publicViewDto\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(listSchema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findAllNonIndividuals?{{INDIVIDUALS_QUERY_STRING}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findAllNonIndividuals"
					],
					"query": [
						{
							"key": "sortedColumnName",
							"value": "clientTypeCode",
							"disabled": true
						},
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"disabled": true
						},
						{
							"key": "{{INDIVIDUALS_QUERY_STRING}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "findByClientNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"\r",
							"pm.test(\"Status check test (\"+pm.variables.get(\"FIND_CODE\")+\")\", () => {\r",
							"    responseData.to.have.status(parseInt(pm.variables.get(\"FIND_CODE\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body\", () => {\r",
							"    const expectedBody = pm.variables.get(\"FIND_BODY\");\r",
							"    pm.response.to.have.body(expectedBody);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {    \r",
							"    if(pm.response.code == 200){\r",
							"        pm.response.to.have.jsonSchema(utils.schemas.publicViewDto);\r",
							"    }else{\r",
							"        pm.expect(pm.response.text()).to.be.a('string');\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findByClientNumber/{{FIND_NUMBER}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findByClientNumber",
						"{{FIND_NUMBER}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "findByNames",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"\r",
							"pm.test(\"Status check test (\"+pm.variables.get(\"BYNAME_CODE\")+\")\", () => {\r",
							"    responseData.to.have.status(parseInt(pm.variables.get(\"BYNAME_CODE\")));\r",
							"});\r",
							"\r",
							"if(parseInt(pm.variables.get(\"BYNAME_CODE\")) == 200){\r",
							"\r",
							"    const jsonData = responseData.json();    \r",
							"        \r",
							"    pm.test(\"List size check test\", () => {\r",
							"        pm.expect(jsonData).to.be.an('array');\r",
							"        const expectedSize = parseInt(pm.variables.get(\"BYNAME_SIZE\"));\r",
							"        pm.expect(jsonData.length).to.equals(expectedSize);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Validate client codes in list\", () => {    \r",
							"        const expectedClientNumbers = pm.variables.get(\"BYNAME_CODES\");\r",
							"        const receivedClientNumbers = jsonData.map(value => value.clientNumber);    \r",
							"        pm.expect(receivedClientNumbers).to.include.members(expectedClientNumbers);\r",
							"    });\r",
							"\r",
							"    const listSchema = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": utils.schemas.publicViewDto\r",
							"    };\r",
							"\r",
							"    pm.test('Schema is valid', function () {\r",
							"        pm.response.to.have.jsonSchema(listSchema);\r",
							"    });\r",
							"\r",
							"}else{\r",
							"     pm.expect(pm.response.text()).to.be.a('string');\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findByNames?{{BYNAME_QUERY_STRING}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findByNames"
					],
					"query": [
						{
							"key": "clientName",
							"value": "\" \"",
							"disabled": true
						},
						{
							"key": "clientFirstName",
							"value": "james",
							"disabled": true
						},
						{
							"key": "clientMiddleName",
							"value": "",
							"disabled": true
						},
						{
							"key": "clientTypeCodes",
							"value": "A,B",
							"disabled": true
						},
						{
							"key": "page",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "20",
							"disabled": true
						},
						{
							"key": "{{BYNAME_QUERY_STRING}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "findByAcronym",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"\r",
							"pm.test(\"Status check test (\"+pm.variables.get(\"BYACRONYM_CODE\")+\")\", () => {\r",
							"    responseData.to.have.status(parseInt(pm.variables.get(\"BYACRONYM_CODE\")));\r",
							"});\r",
							"\r",
							"if(parseInt(pm.variables.get(\"BYACRONYM_CODE\")) == 200){\r",
							"\r",
							"    const jsonData = responseData.json();\r",
							"\r",
							"    pm.test('Must have a body',() =>{\r",
							"        pm.expect(jsonData).to.not.be.undefined;\r",
							"        pm.expect(jsonData).to.not.be.null;\r",
							"        pm.expect(jsonData).to.be.an('array');\r",
							"    });\r",
							"\r",
							"    \r",
							"    pm.test(\"CLient Number match\", function () {        \r",
							"         const expectedClientNumbers = pm.variables.get(\"BYACRONYM_NUMBER\");\r",
							"        const receivedClientNumbers = jsonData.map(value => value.clientNumber);    \r",
							"        pm.expect(receivedClientNumbers).to.include.members(expectedClientNumbers);        \r",
							"    });\r",
							"    \r",
							"    const listSchema = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": utils.schemas.publicViewDto\r",
							"    };\r",
							"\r",
							"    pm.test('Schema is valid', function () {\r",
							"        pm.response.to.have.jsonSchema(listSchema);\r",
							"    });\r",
							"\r",
							"}else{\r",
							"     pm.expect(pm.response.text()).to.be.a('string');\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/findByAcronym?{{BYACRONYM_QUERY_STRING}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"findByAcronym"
					],
					"query": [
						{
							"key": "{{BYACRONYM_QUERY_STRING}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "listLocations",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"LOCATIONS_POSTALCODES\",[]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response;\r",
							"\r",
							"pm.test(\"Status check test (\"+pm.variables.get(\"LOCATIONS_CODE\")+\")\", () => {\r",
							"    responseData.to.have.status(parseInt(pm.variables.get(\"LOCATIONS_CODE\")));\r",
							"});\r",
							"\r",
							"if(parseInt(pm.variables.get(\"LOCATIONS_CODE\")) == 200){\r",
							"\r",
							"    const jsonData = responseData.json();\r",
							"            \r",
							"    pm.test(\"List size check test\", () => {\r",
							"        pm.expect(jsonData).to.be.an('array');\r",
							"        const expectedSize = parseInt(pm.variables.get(\"LOCATIONS_SIZE\"));\r",
							"        pm.expect(jsonData.length).to.equals(expectedSize);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Validate client postal codes in list\", () => {    \r",
							"        const expectedPostalCodes = pm.variables.get(\"LOCATIONS_POSTALCODES\");\r",
							"        const receivedPostalCodes = jsonData.map(value => value.postalCode);    \r",
							"        pm.expect(receivedPostalCodes).to.include.members(expectedPostalCodes);\r",
							"    });\r",
							"    \r",
							"    const listSchema = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": utils.schemas.locationDto\r",
							"    };\r",
							"\r",
							"    pm.test('Schema is valid', function () {\r",
							"        pm.response.to.have.jsonSchema(listSchema);\r",
							"    });\r",
							"\r",
							"}else{\r",
							"     pm.expect(pm.response.text()).to.be.a('string');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL_FCA}}/api/clients/{{LOCATIONS_NUMBER}}/locations?{{LOCATIONS_QUERY_STRING}}",
					"host": [
						"{{URL_FCA}}"
					],
					"path": [
						"api",
						"clients",
						"{{LOCATIONS_NUMBER}}",
						"locations"
					],
					"query": [
						{
							"key": "{{LOCATIONS_QUERY_STRING}}",
							"value": null
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const schemas= {",
					"    locationDto: {        ",
					"        \"type\": \"object\",",
					"        \"properties\": {",
					"            \"clientNumber\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The client number\",",
					"            \"example\": \"00000002\"",
					"            },",
					"            \"locationCode\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The location index\",",
					"            \"example\": \"00\"",
					"            },",
					"            \"locationName\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The reference name of the location\",",
					"            \"example\": \"Office\"",
					"            },",
					"            \"companyCode\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The internal company code\",",
					"            \"example\": \"01234\"",
					"            },",
					"            \"address1\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The address information\",",
					"            \"example\": \"555 Unknown Rd\"",
					"            },",
					"            \"address2\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The address information\",",
					"            \"example\": \"Side Parkway\"",
					"            },",
					"            \"address3\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The address information\",",
					"            \"example\": \"Spot 3\"",
					"            },",
					"            \"city\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The city name\",",
					"            \"example\": \"VICTORIA\"",
					"            },",
					"            \"province\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The province/territory code\",",
					"            \"example\": \"BC\"",
					"            },",
					"            \"postalCode\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The postal code/zip code\",",
					"            \"example\": \"V9T6J6\"",
					"            },",
					"            \"country\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The country code\",",
					"            \"example\": \"CA\"",
					"            },",
					"            \"businessPhone\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The business phone number\",",
					"            \"example\": \"555 555 5555\"",
					"            },",
					"            \"homePhone\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The home/personal phone number\",",
					"            \"example\": \"555 555 5555\"",
					"            },",
					"            \"cellPhone\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The cellphone number\",",
					"            \"example\": \"555 555 5555\"",
					"            },",
					"            \"faxNumber\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The fax number\",",
					"            \"example\": \"555 555 5555\"",
					"            },",
					"            \"email\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The email address\",",
					"            \"example\": \"555 555 5555\"",
					"            },",
					"            \"expired\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"Define if this entry is expired or not<br>Y means yes<br>N means no\",",
					"            \"example\": \"Y\",",
					"            \"enum\": [",
					"                \"Y\",",
					"                \"N\"",
					"            ]",
					"            },",
					"            \"trusted\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"Define if this entry is to be trusted or not<br>Y means yes<br>N means no\",",
					"            \"example\": \"N\",",
					"            \"enum\": [",
					"                \"Y\",",
					"                \"N\"",
					"            ]",
					"            },",
					"            \"returnedMailDate\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"The date when the mail was returned\",",
					"            \"format\": \"date\",",
					"            \"example\": \"2012-05-14\"",
					"            },",
					"            \"comment\": {",
					"            \"type\": [\"string\", \"null\"],",
					"            \"description\": \"An open field containing comments about the address\",",
					"            \"example\": \"It is used just as a mail address, residential address\"",
					"            }",
					"        }",
					"    },",
					"    publicViewDto: {        ",
					"        \"type\": \"object\",",
					"        \"properties\": {",
					"            \"clientNumber\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The client number\",",
					"            \"example\": \"00000002\"",
					"            },",
					"            \"clientName\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The client last name if it's an individual or\\n the company name if it's a company\",",
					"            \"example\": \"BAXTER\"",
					"            },",
					"            \"legalFirstName\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The first name of the individual,\\n or null if it's a company\",",
					"            \"example\": \"JAMES\"",
					"            },",
					"            \"legalMiddleName\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The middle name of the individual,\\n or null if it's a company\",",
					"            \"example\": \"Canter\"",
					"            },",
					"            \"clientStatusCode\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The status of the client, can be any of the following:<br>\\n\\nACT (Active)<br>\\nDAC (Deactivated)<br>\\nDEC (Deceased)<br>\\nREC (Receivership)<br>\\nSPN (Suspended)\",",
					"            \"example\": \"ACT\"",
					"            },",
					"            \"clientTypeCode\": {",
					"            \"type\": \"string\",",
					"            \"description\": \"The type of client, can be any of the following:<br>\\n\\nA (Association)<br>\\nB (First Nation Band)<br>\\nC (Corporation)<br>\\nF (Ministry of Forests and Range)<br>\\nG (Government)<br>\\nI (Individual)<br>\\nL (Limited Partnership)<br>\\nP (General Partnership)<br>\\nR (First Nation Group)<br>\\nS (Society)<br>\\nT (First Nation Tribal Council)<br>\\nU (Unregistered Company)\",",
					"            \"example\": \"I\"",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"utils = {",
					"    schemas",
					"};",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}